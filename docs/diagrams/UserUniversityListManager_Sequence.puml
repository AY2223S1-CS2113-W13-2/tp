@startuml
'https://plantuml.com/sequence-diagram

hide footbox

-> ":UserUniversityListManager" : createList(input)
activate ":UserUniversityListManager"

":UserUniversityListManager" -> ":UserUniversityListManager" : containsKey((input)
activate ":UserUniversityListManager"
return : boolean

alt school already exists

else new school list
    ":UserUniversityListManager" -> ":UserUniversityList" **: new
    activate ":UserUniversityList"
    return ":UserUniversityList"
    ":UserUniversityListManager" -> ":UserUniversityListManager" : put(input, newList)
    activate ":UserUniversityListManager"

    ":UserUniversityListManager" -> ":Ui" : printPuListCreatedAcknowledgement(input)
    activate ":Ui"
    return

    return

end
return
deactivate ":UserUniversityListManager"

-> ":UserUniversityListManager" : deleteList(input)
activate ":UserUniversityListManager"

":UserUniversityListManager" -> ":UserUniversityListManager" : containsKey((input)
activate ":UserUniversityListManager"
return : boolean

alt inputSchool exists
    ":UserUniversityListManager" -> ":UserUniversityListManager" : remove(inputSchool)
    activate ":UserUniversityListManager"

    ":UserUniversityListManager" -> ":Ui" : printPuListDeletedAcknowledgement(inputSchool)
    activate ":Ui"
    return
else inputSchool does not exist
end

return
deactivate ":UserUniversityListManager"

-> ":UserUniversityListManager" : addModule(inputSchool, inputModule)
activate ":UserUniversityListManager"
":UserUniversityListManager" -> ":UserUniversityListManager" : containsKey(inputSchool)
activate ":UserUniversityListManager"
return : boolean

alt inputSchool exists
    ":UserUniversityListManager" -> ":UserUniversityListManager" : getUserUniversityList(inputSchool)
    activate ":UserUniversityListManager"
    return : ":UserUniversityList"
    ":UserUniversityListManager" -> ":UserUniversityList" : addModule(inputModule)
    activate ":UserUniversityList"

    ":UserUniversityList" -> ":UserUniversityList" : addModule(input)
    activate ":UserUniversityList"
    ":UserUniversityList" -> ":UserUniversityList" : findModuleByCode(input)
    activate ":UserUniversityList"
    return : boolean
    alt module already exists
    else new module
        ":UserUniversityList" -> ":UserUniversityList" : add(input)
        activate ":UserUniversityList"

        ":UserUniversityList" -> ":Ui" : printModuleAddedAcknowledgement(input)
        activate ":Ui"
        ":UserUniversityList" <-- ":Ui"
        deactivate ":Ui"
        return
    end
    ":UserUniversityList" <-- ":UserUniversityList"
    deactivate ":UserUniversityList"
    ":UserUniversityListManager" <-- ":UserUniversityList"
    deactivate ":UserUniversityList"

else inputSchool does not exist

end
return
deactivate ":UserUniversityListManager"

@enduml